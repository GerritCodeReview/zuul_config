{
  "comments": [
    {
      "key": {
        "uuid": "c71d9b73_dcf4aa1d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2020-04-29T16:43:38Z",
      "side": 1,
      "message": "Actually it requires *ALL* the core plugins: the plugin-manager is the \"one ring to rule them all\", therefore needs to make a release.war distribution and testing that is able to list, extract and install them E2E.",
      "range": {
        "startLine": 9,
        "startChar": 39,
        "endLine": 9,
        "endChar": 56
      },
      "revId": "49d30b6bea62b72f19afeaa8405637921c671d79",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a81c37c7_291c7a63",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1087826
      },
      "writtenOn": "2020-04-29T16:55:06Z",
      "side": 1,
      "message": "Given that, then we may want to take the alternate approach in https://gerrit-review.googlesource.com/265213 since it would be the full list, and it\u0027s going to be different for each branch.  I don\u0027t think we want to duplicate all of that here or in the plugin-manager repo.",
      "revId": "49d30b6bea62b72f19afeaa8405637921c671d79",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "335e269d_a5336339",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2020-04-29T18:27:23Z",
      "side": 1,
      "message": "Say, we would add another 100 plugins as core plugins. Only one single core plugin right now: plugin-manager requires all 100 plugins to be cloned. Is that smart to always clone 100 of plugins to verify core plugin for every core plugin in vain? Bandwidth is very valuable resources and we should avoid wasting it.\n\nI would prefer one of these alternative:\n\n* 1. Rewrite the test in plugin-manager to not require release.war to be built in the first place. There is RedHat java library for creating jar and war using Java API (forgot it name), So that we could mock release.war with similar content without requiring actual real release.war to be built. It was probably a crazy idea anyway.\n*. 2 Rewrite the test to only use release.war with one single plugin: plugin-manager included in release.war. This repository is already cloned. We could add new rule to gerrit core: release_with_plugin_manager_plugin.war",
      "parentUuid": "a81c37c7_291c7a63",
      "revId": "49d30b6bea62b72f19afeaa8405637921c671d79",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2dc495c5_c699b9a7",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2020-04-29T20:04:12Z",
      "side": 1,
      "message": "\u003e Say, we would add another 100 plugins as core plugins. Only one single core plugin right now: plugin-manager requires all 100 plugins to be cloned. Is that smart to always clone 100 of plugins to verify core plugin for every core plugin in vain? Bandwidth is very valuable resources and we should avoid wasting it.\n\u003e \n\u003e I would prefer one of these alternative:\n\u003e \n\u003e * 1. Rewrite the test in plugin-manager to not require release.war to be built in\n\nYou mean not to test E2E: not an option as this is the reason why we write tests. We want to make sure that the code works E2E. That specific test was written to fix a bug discovered.\nThe CI/CD system should be flexible enough to be able to run tests, no the other way around.\n\n\u003e the first place. There is RedHat java library for creating jar and war using Java API (forgot it name), So that we could mock release.war with similar content without requiring actual real release.war to be built. It was probably a crazy idea anyway.\n\nIt was your idea :-) and I liked it. I would have not been able to do that with Bazel.\n\n\u003e *. 2 Rewrite the test to only use release.war with one single plugin: plugin-manager included in release.war. This repository is already cloned. We could add new rule to gerrit core: release_with_plugin_manager_plugin.war\n\nThen it won\u0027t be E2E anymore.",
      "parentUuid": "335e269d_a5336339",
      "revId": "49d30b6bea62b72f19afeaa8405637921c671d79",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "df37499f_ea1b7a4c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2020-04-29T20:21:44Z",
      "side": 1,
      "message": "\u003e *. 2 Rewrite the test to only use release.war with one single plugin: plugin-manager included in release.war. This repository is already cloned. We could add new rule to gerrit core: release_with_plugin_manager_plugin.war\n\n\u003e Then it won\u0027t be E2E anymore.\n\nHow that? plugin-manager has two modes: install local plugins from  release.war and remote plugins from configured CI site. Why testing 1 plugin from release.was is not enough? Why it has to be 10 plugins or hundreds in release.war? What error would you detect, if it work with installing one plugin from release.war, compared to 100 plugins included in release.war?",
      "parentUuid": "2dc495c5_c699b9a7",
      "revId": "49d30b6bea62b72f19afeaa8405637921c671d79",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a2379330_028cc39c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2020-04-30T10:02:28Z",
      "side": 1,
      "message": "We do currently init the submodules for the plugins\u0027 builds on Gerrit-CI, and that takes a few seconds. See for example the validation of a change on the zookeeper-ref (took 3 mins, including tests with TestContainers):\n\nhttps://gerrit-ci.gerritforge.com/job/plugin-zookeeper-refdb-verifier/job/74%252F264474%252F3/1/console\n\nI we have *all* verifications, including activation of test-containers, running in 3 minutes, I believe we should by quite happy isn\u0027t it?",
      "parentUuid": "df37499f_ea1b7a4c",
      "revId": "49d30b6bea62b72f19afeaa8405637921c671d79",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3c8c02bf_745e5721",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2020-04-30T10:11:38Z",
      "side": 1,
      "message": "I am not convinced at all. Consider Jenkins eco system with 10K plugins.\n\nNow, you write plugin \"foo\" with E2E fancy tests that clone 10K repositories to produce jenkins_with_all_plugins_shaded.war. Why not? Do it, if you can.\n\nBut now, you ask Kohsuke Kawaguchi, because your plugins so important to you and you always want e2e, he should accept in jenkins core your change, and clone for *every* plugin build all  10k repositories.",
      "parentUuid": "a2379330_028cc39c",
      "revId": "49d30b6bea62b72f19afeaa8405637921c671d79",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "65d958a5_236cf634",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1087826
      },
      "writtenOn": "2020-05-01T14:33:44Z",
      "side": 1,
      "message": "I\u0027ve read the above replies.  Here are some general thoughts, and I\u0027ll follow them up with specific suggestions:\n\n* Cloning and bandwidth: yes we should minimize the number of repos that we clone to save processing and bandwidth.  However, we may decide that cloning all of the core plugins isn\u0027t such a big deal (especially compared to gerrit itself, which is always needed).  One way to mitigate this cost is to use custom images with gerrit and the core repos pre-cached.  In that case, Zuul only needs to push the delta and it\u0027s very efficient.  We don\u0027t need to decide that right now though.\n\n* Zuul\u0027s specialty is E2E testing across projects, so it\u0027s definitely in-scope to do this.  I think the only question is how and where to describe the dependency relationship between the different plugins.  I think these are our options:\n\n1) Update this change to list all of the plugins that plugin-manager needs.  This could get a little verbose because we\u0027ll need a list of plugins for each branch.  And if the list is just the list of core plugins, then we\u0027ll end up duplicating the list that\u0027s already in the gerrit repo.  I would suggest this approach for a small number of additional plugins, but since it\u0027s looking like a large number, I think we should use a different approach.\n\n2) Option #1 but put the list in the plugin-manager repo.  We would still have the same amount of duplicated configuration, but it would be easier to manage because it would be inside the plugin-manager repo itself, much like the list of required and core plugins is currently in the .zuul.yaml in the gerrit repo.  Once we set that up, if you added a new plugin for plugin-manager to use, then you could simply also add it to the job config at the same time.  When new branches are created, the config will automatically be copied from the branch point.  This also has the advantage of easily being able to add plugins other than core plugins to the build/test jobs.\n\n3) Always checkout all the core plugins for all gerrit and plugin build jobs.  This is the change at https://gerrit-review.googlesource.com/265213 .  This is the simplest way to solve the issue, but it comes at the cost of unecessary checkouts for plugin builds that don\u0027t need all the core plugins.  It also doesn\u0027t address adding non-core plugins to plugin-manager.\n\n4) Add an extra layer of hierarchy to the job structure in the gerrit repo.  Currently the core plugins are added only in the gerrit-build job.  The gerrit-plugin-build job is based on gerrit-base, which adds jgit, but not core plugins.  We could insert a new layer called \u0027gerrit-with-plugins-base\u0027 which adds the plugins and reparent gerrit-build on that.  We would leave gerrit-plugin-build parented to gerrit-base so it doesn\u0027t see the plugins, but then create a new gerrit-plugin-build-with-plugins job that inherits from the new job.  This is the most efficient solution because it only clones plugins when necessary, and it has no duplication of configuration.  But it does make the configuration harder to follow and like #3 only addresses core plugins.\n\nHere\u0027s how I would recommend making the decision:\n\n* If you may want to test plugin-manager with non-core plugins: eliminate options #3 and #4.\n* If you would prefer to waste a little bit of bandwidth/cpu for simplicity, choose #3.\n* If you want the job to be as efficient as possible at the cost of a little bit of configuration duplication, chose #2 (or possibly #4).\n* If you have gotten to this point and absolutely can\u0027t stand the thought of having a .zuul.yaml file in plugin-manager, choose #1.\n\nIf you\u0027d like to see what option #2 looks like, I\u0027d be happy to propose a WIP change to demonstrate.\n\nAfter writing all this out and thinking about it, my recommendations in order of preference would be #2, #3, #4, #1.  I think #2 is the best.",
      "revId": "49d30b6bea62b72f19afeaa8405637921c671d79",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}